{
    "docs": [
        {
            "location": "/", 
            "text": "Coding for Journalists\n\n\nThis class is an evolving introduction to coding and the Python programming language for journalists. In addition to a tour of the fundamentals, it spans four basic projects to get you started.\n\n\nThe first version of this course happened at the \n2015 IRE Conference in Philadelphia\n; the repository and associated tasks have been updated throughout the summer.\n\n\nA few things to note before we get rolling:\n\n\n\n\nThis guide and all documentation live at \ncoding-for-journalists.rtfd.org\n\n\nThe GitHub repository that includes all code is available from \ngithub.com/ireapps/coding-for-journalists\n\n\nA good place to raise issues with the code or ask specific questions about the code is \nalso on GitHub\n\n\nEmail\n IRE Training Director Alex Richards, the primary author of this course, or \ncontact him on Twitter\n\n\n\n\nBecause of the pace of this class and limited amount of time available, we won't be able to easily accommodate attendees who prefer to use their own laptops during the session. \n\n\nEach task we'll tackle has (at least) two files: the one for writing code in and a version with \"_done\" appended to the name that's already been completed. Since there won't be enough time to get through every single one, you can circle back afterward, fetch these files from GitHub and work through the exercises on your own.\n\n\nRequirements\n\n\nThis is designed for people who have some grounding in data journalism already and experience with spreadsheets and database managers. It's helpful if you understand Excel functions, for example, and some basic SQL.\n\n\nYou will likely struggle if you don't know how to navigate the computer's command line, too; it involves moving between folders, running scripts and issuing commands to a Python interpreter.\n\n\nHere's what the next few hours have in store:\n\n\n1_start\n\n\nA whirlwind tour of Python's data types, variables, basic functionality and loops. We'll run a script in the iPython interactive interpreter to load a variety of variables and then start messing with them.\n\n\n2_web_scrape\n\n\nFetching data from the web was one of programming's original beachheads in the journalism world. We're going to grab a data table from a website and turn it into a delimited text file to use in a spreadsheet or database manager.\n\n\nThis is a task one could arguably accomplish using Excel's \"import from web\" feature, so we're going to take it one step further: we'll alter our script to drill into additional detail pages and automatically extract more columns of data for our text file.\n\n\n3_parse_addresses\n\n\nData don't always arrive in a nice, neat table. We have hundreds of addresses to parse into a format that will work in Excel or a database manager, and Python is going to help us make it happen. We'll write a script that dices it all and puts everything in its proper place -- one line for one location.\n\n\n4_make_function\n\n\nIn this quick project, we'll modify the address parsing script we wrote in the previous exercise, turning it into a reusable function that we can apply to future address lists that arrive in the same problematic format.\n\n\n5_geocode\n\n\nGeocoding is one of those perennial data journalism problems that's gotten easier in some ways over the years, yet harder in others. While having a street address is great, having a latitude and longitude is better. We'll take the poorly formatted addresses we coaxed into a flat file and march them one at a time through an online geocoding service using a handy Python library called \ngeopy\n.", 
            "title": "Main"
        }, 
        {
            "location": "/#coding-for-journalists", 
            "text": "This class is an evolving introduction to coding and the Python programming language for journalists. In addition to a tour of the fundamentals, it spans four basic projects to get you started.  The first version of this course happened at the  2015 IRE Conference in Philadelphia ; the repository and associated tasks have been updated throughout the summer.  A few things to note before we get rolling:   This guide and all documentation live at  coding-for-journalists.rtfd.org  The GitHub repository that includes all code is available from  github.com/ireapps/coding-for-journalists  A good place to raise issues with the code or ask specific questions about the code is  also on GitHub  Email  IRE Training Director Alex Richards, the primary author of this course, or  contact him on Twitter   Because of the pace of this class and limited amount of time available, we won't be able to easily accommodate attendees who prefer to use their own laptops during the session.   Each task we'll tackle has (at least) two files: the one for writing code in and a version with \"_done\" appended to the name that's already been completed. Since there won't be enough time to get through every single one, you can circle back afterward, fetch these files from GitHub and work through the exercises on your own.  Requirements  This is designed for people who have some grounding in data journalism already and experience with spreadsheets and database managers. It's helpful if you understand Excel functions, for example, and some basic SQL.  You will likely struggle if you don't know how to navigate the computer's command line, too; it involves moving between folders, running scripts and issuing commands to a Python interpreter.  Here's what the next few hours have in store:  1_start  A whirlwind tour of Python's data types, variables, basic functionality and loops. We'll run a script in the iPython interactive interpreter to load a variety of variables and then start messing with them.  2_web_scrape  Fetching data from the web was one of programming's original beachheads in the journalism world. We're going to grab a data table from a website and turn it into a delimited text file to use in a spreadsheet or database manager.  This is a task one could arguably accomplish using Excel's \"import from web\" feature, so we're going to take it one step further: we'll alter our script to drill into additional detail pages and automatically extract more columns of data for our text file.  3_parse_addresses  Data don't always arrive in a nice, neat table. We have hundreds of addresses to parse into a format that will work in Excel or a database manager, and Python is going to help us make it happen. We'll write a script that dices it all and puts everything in its proper place -- one line for one location.  4_make_function  In this quick project, we'll modify the address parsing script we wrote in the previous exercise, turning it into a reusable function that we can apply to future address lists that arrive in the same problematic format.  5_geocode  Geocoding is one of those perennial data journalism problems that's gotten easier in some ways over the years, yet harder in others. While having a street address is great, having a latitude and longitude is better. We'll take the poorly formatted addresses we coaxed into a flat file and march them one at a time through an online geocoding service using a handy Python library called  geopy .", 
            "title": "Coding for Journalists"
        }, 
        {
            "location": "/task1/", 
            "text": "Another test", 
            "title": "Getting started"
        }, 
        {
            "location": "/task1/#another-test", 
            "text": "", 
            "title": "Another test"
        }, 
        {
            "location": "/next_steps/", 
            "text": "Next Steps\n\n\nIf you're curious about the different paths for installing Python and various libraries on your own computer, some excellent resources exist as part of the \nPyCAR\n repository. The \ntake-home portion\n points to several tutorials and guides that cover Mac and PC setup, how to compartmentalize projects in their own virtual environments and the use of version control.\n\n\nIf you want to use a virtualenv, we've included a (short) requirements file for \npip\n with all the non-standard libraries used and their dependencies.\n\n\nHere are stops to make as you expand your knowledge and keep practicing these news skills:\n\n\n\n\nAgain, the \nPyCAR\n repository, a daylong class taught at the 2014 and 2015 NICAR Conferences.\n\n\nAnthony Debarros' \npython-get-started\n repository and his useful \npython-snippets\n, a list of practical code examples.\n\n\nBen Welsh's updated guide to building \na web scraper in Python\n and his guide for building \na lightweight news app\n.\n\n\nLearnPython\n is an interactive tutorial that covers a lot of this same ground and more.", 
            "title": "Next steps"
        }, 
        {
            "location": "/install/", 
            "text": "This is just a test.\n\n\nWe're working in a PC lab in Philadelphia, so we're going to be using the \nAnaconda distribution of Python\n, which comes with many popular libraries already installed alongside the core program. We'll also be using Windows PowerShell as the command line interface to run our scripts and \niPython\n, a handy interactive interpreter and sandbox for messing around with Python. Beyond that, we'll be using just a text editor. Everything you'll need is already installed and tested on these machines.\n\n\nThe stuff you'll have to have\n\n\nGetting to the point where you can do this at work or home can be half the battle. The good news is that it can pretty much all be had for free, as in beer. Taking a cue from Ben Welsh, let's talk for a second about what this will require:\n\n\n\n\nA text editor\n\n\nPython\n\n\npip\n\n\nvirtualenv\n\n\nvirtualenvwrapper (optional)\n\n\n\n\nHere's how it fits together.\n\n\nThe text editor\n allows you to write scripts for the Python interpreter in a plain text format. Whereas the files of a word processor like Microsoft Word or Apple's Pages are designed for presentation and cluttered with a bunch of elements that control text styling, you need a piece of software that just holds information. Having one is a must for writing code and great for examining data.\n\n\nPython\n is the engine of the entire affair; it's a code interpreter that's going to look at the commands you write and then faithfully execute them.\n\n\npip\n is an external Python library that helps you manage the download and installation of packages that don't come with standard Python. There's a lot there already, sure, but people have written new modules to assist with tasks like web scraping and dealing with PDF files. It makes adding new functionality as easy as typing \npip install \nsome new package\n. \npip\n will fetch it from the internet and install it for you--and do the same for any other packages required to make it all work correctly.\n\n\nvirtualenv\n is an external Python library that allows you to create virtual sandboxes where your scripts can live and have their own libraries, completely compartmentalized from one another\n\n\nvirtualenvwrapper\n is an external Python library that makes it easier to deal with the various virtual environments; with a few brief commands, you can jump in and out of environments with ease.\n\n\nWindows\n\n\nMac\n\n\nLinux", 
            "title": "Getting set up at home"
        }
    ]
}